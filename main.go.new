package main

import (
	"encoding/json"
	"fmt"
	"github.com/gorilla/websocket"
	"github.com/rs/cors"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"sync"
)

// Структура сообщения
type Message struct {
	Type    string   `json:"type"`
	Message string   `json:"message"`
	Body    string   `json:"body"`
	UserIDs []string `json:"user_ids"` // Список ID пользователей, которым нужно отправить сообщение
}

// Структура для хранения WebSocket соединений с привязкой к пользователям
type Client struct {
	conn *websocket.Conn
	id   string
}

var (
	clients      = make(map[string]*Client) // Хранение пользователей по ID
	clientsMutex sync.Mutex                 // Мьютекс для синхронизации доступа к клиентам
	upgrader     = websocket.Upgrader{
		CheckOrigin: func(r *http.Request) bool { return true },
	}
)

type Config struct {
	ServerMode   string `json:"server_mode"`    // http или https
	CertFilePath string `json:"cert_file_path"` // Путь к сертификату
	KeyFilePath  string `json:"key_file_path"`  // Путь к ключу
	Port         string `json:"port"`           // Порт для подключения
}

// Загрузка конфигурации из файла
func loadConfig() (*Config, error) {
	file, err := os.Open("config.json")
	if err != nil {
		return nil, err
	}
	defer file.Close()

	config := &Config{}
	decoder := json.NewDecoder(file)
	err = decoder.Decode(config)
	if err != nil {
		return nil, err
	}

	return config, nil
}

// Обработка сообщений от клиента через WebSocket
func handleMessages(conn *websocket.Conn, userID string) {
	defer conn.Close()

	for {
		// Чтение сообщения от клиента
		_, msg, err := conn.ReadMessage()
		if err != nil {
			log.Printf("Error reading message from user %s: %v", userID, err)
			clientsMutex.Lock()
			if _, exists := clients[userID]; exists {
				delete(clients, userID)
				log.Printf("Client %s removed from clients map due to read error", userID)
			}
			clientsMutex.Unlock()
			break
		}

		// Парсинг JSON сообщения
		var msgObj Message
		if err := json.Unmarshal(msg, &msgObj); err != nil {
			log.Printf("Error unmarshalling message from user %s: %v", userID, err)
			continue
		}

		// Выводим сообщение в консоль
		fmt.Printf("Received message: Type=%s, Message=%s, Body=%s\n", msgObj.Type, msgObj.Message, msgObj.Body)

		// Пересылаем сообщение всем указанным пользователям
		clientsMutex.Lock()
		for _, id := range msgObj.UserIDs {
			if client, ok := clients[id]; ok && client.conn != nil {
				err := client.conn.WriteMessage(websocket.TextMessage, msg)
				if err != nil {
					log.Printf("Error sending message to client %s: %v", id, err)
				}
			} else {
				log.Printf("Client %s not connected or connection closed", id)
			}
		}
		clientsMutex.Unlock()
	}
}

// Обработчик WebSocket-соединений
func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("Error upgrading connection: %v", err)
		return
	}

	// Получаем user_id из запроса
	userID := r.URL.Query().Get("user_id")
	if userID == "" {
		log.Println("User ID is required")
		conn.Close()
		return
	}

	// Добавляем клиента
	clientsMutex.Lock()
	clients[userID] = &Client{conn: conn, id: userID}
	clientsMutex.Unlock()

	log.Printf("User %s connected", userID)

	// Обрабатываем сообщения от клиента
	handleMessages(conn, userID)
}

// Обработчик POST запросов для отправки сообщений
func sendMessage(w http.ResponseWriter, r *http.Request) {
	// Чтение и парсинг POST запроса
	var msg Message
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&msg); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Если user_ids не указаны, отправлять не будем
	if len(msg.UserIDs) == 0 {
		http.Error(w, "No user_ids provided", http.StatusBadRequest)
		return
	}

	// Отправляем сообщение указанным пользователям
	clientsMutex.Lock()
	defer clientsMutex.Unlock()

	for _, id := range msg.UserIDs {
		client, ok := clients[id]
		if !ok || client.conn == nil {
			log.Printf("Client %s not found or connection is nil", id)
			continue
		}

		// Отправляем сообщение
		messageJSON, err := json.Marshal(msg)
		if err != nil {
			log.Printf("Error marshalling message to JSON: %v", err)
			continue
		}
		err = client.conn.WriteMessage(websocket.TextMessage, messageJSON)
		if err != nil {
			log.Printf("Error sending message to client %s: %v", id, err)
		}
	}

	// Ответ на POST запрос
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "Message sent to %d clients", len(msg.UserIDs))
}

func main() {

	// Загружаем конфигурацию
	config, err := loadConfig()
	if err != nil {
		log.Fatalf("Error loading config: %v", err)
	}

	// Настройка CORS
	corsHandler := cors.New(cors.Options{
		AllowedOrigins: []string{"*"}, // Разрешаем все источники
		AllowedMethods: []string{"GET", "POST", "OPTIONS"},
		AllowedHeaders: []string{"Content-Type", "Authorization"},
	})

	port := config.Port
	if config.ServerMode == "https" {
		certFile := config.CertFilePath
		keyFile := config.KeyFilePath
		if _, err := ioutil.ReadFile(certFile); err != nil {
			log.Fatalf("Error reading cert file: %v", err)
		}
		if _, err := ioutil.ReadFile(keyFile); err != nil {
			log.Fatalf("Error reading key file: %v", err)
		}

		log.Printf("Starting HTTPS server on :%s", port)
		if err := http.ListenAndServeTLS(":"+port, certFile, keyFile, corsHandler.Handler(nil)); err != nil {
			log.Fatalf("Error starting HTTPS server: %v", err)
		}
	} else {
		log.Printf("Starting HTTP server on :%s", port)
		if err := http.ListenAndServe(":"+port, corsHandler.Handler(nil)); err != nil {
			log.Fatalf("Error starting HTTP server: %v", err)
		}
	}

	// Обработчики
	http.HandleFunc("/ws", handleWebSocket) // WebSocket соединения
	http.HandleFunc("/send", sendMessage)   // POST запрос для отправки сообщений
}
